package com.example.letsgo.models

import android.graphics.*
import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey
import kotlin.random.Random

@Entity(tableName = Achievement.tableName)
class Achievement(
    @ColumnInfo(name = "sets") private val sets: Int,
    @ColumnInfo(name = "reps") private val reps: Int,
    @ColumnInfo(name = "intensity") private val intensity: Int,
    @ColumnInfo(name = "unit") private val unit: String,
    @ColumnInfo(name = "tag") private val tag: String,
    @ColumnInfo(name = "color1") private val color1: Int,
    @ColumnInfo(name = "color2") private val color2: Int    // previously called "color transparent"
) {

    // Use 0 as a default when creating the object or initializing the autogenerated key
    @PrimaryKey(autoGenerate = true) @ColumnInfo(name = "id") var id: Int = 0

    val intensityInUnits = "${intensity} ${unit}"
    val volume = "${sets} Ã— ${reps}"
    val hashtag = "#${tag}"

    private val pointPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        color = color1
        style = Paint.Style.FILL
    }

    lateinit var canvas: Canvas
    lateinit var bitmap: Bitmap

    private var setProgress = 0

    fun progress() = "$setProgress of ${sets}"
    fun isInProgress() = setProgress < sets

    fun getRandomRadius() = Random.nextInt(RADIUS_MIN, RADIUS_MAX).toFloat()
    fun getRadialGradient(x: Float, y: Float, rad: Float) = RadialGradient(x, y, rad, color1, color2, Shader.TileMode.CLAMP)

    fun increment(){

        setProgress++

    }

    fun isBitmapInit(): Boolean {
        return ::bitmap.isInitialized
    }

    fun drawCircle(x: Float, y: Float, rad: Float){

        pointPaint.shader = getRadialGradient(x, y, rad)
        canvas.drawCircle(x, y, rad, pointPaint)

    }

    companion object{
        const val tableName = "counters"
        const val RADIUS_MIN = 200
        const val RADIUS_MAX = 500
    }

}